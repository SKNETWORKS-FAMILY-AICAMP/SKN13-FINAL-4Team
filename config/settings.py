"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.
"""
from pathlib import Path
import os
from dotenv import load_dotenv

# Load .env
load_dotenv()

# -------------------------
# Base paths
# -------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# -------------------------
# Environment
# -------------------------
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'development')  # development or production
DEBUG = ENVIRONMENT != 'production'

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-67i&fjm5^wi4g@s)ka&z4a0(l&-sgm+9jf%w^y_2*4d6%&q^z4')

# -------------------------
# Allowed Hosts
# -------------------------
if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    allowed_hosts_str = os.environ.get('DJANGO_ALLOWED_HOSTS', '')
    ALLOWED_HOSTS = [h.strip() for h in allowed_hosts_str.split(',') if h.strip()]

# -------------------------
# Installed Apps & Middleware
# -------------------------
INSTALLED_APPS = [
    'daphne',
    'channels',
    'users',  # 커스텀 User 모델을 사용하므로 django.contrib.admin보다 먼저 와야 함
    'chat',
    'payments',  # Keep payments app from HEAD
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'config.asgi.application'

# -------------------------
# Database
# -------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get("DB_NAME"),
        'USER': os.environ.get("DB_USER"),
        'PASSWORD': os.environ.get("DB_PASSWORD"),
        'HOST': os.environ.get("DB_HOST"),
        'PORT': os.environ.get("DB_PORT"),
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
    }
}

# -------------------------
# Password validation
# -------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# -------------------------
# Internationalization
# -------------------------
LANGUAGE_CODE = 'ko'
TIME_ZONE = 'Asia/Seoul'
USE_I18N = True
USE_TZ = True

# -------------------------
# Static & Media
# -------------------------
STATIC_URL = 'static/'
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------
# CORS
# -------------------------
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    cors_origins_str = os.environ.get('CORS_ALLOWED_ORIGINS', '')
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_str.split(',') if origin.strip()]

# WebSocket에서 쿠키 기반 세션 인증을 위해 필요
CORS_ALLOW_CREDENTIALS = True

# 세션 쿠키 설정
SESSION_COOKIE_HTTPONLY = False  # JavaScript에서 접근 가능하도록 (WebSocket용)
SESSION_COOKIE_SAMESITE = 'Lax'  # CORS 환경에서 쿠키 전송 허용

# ngrok 경고를 건너뛰기 위한 커스텀 헤더를 허용
CORS_ALLOW_HEADERS = [
    'accept', 'accept-encoding', 'authorization', 'content-type', 'dnt',
    'origin', 'user-agent', 'x-csrftoken', 'x-requested-with',
    'ngrok-skip-browser-warning',
]

# -------------------------
# Authentication
# -------------------------
AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 30,
}

# -------------------------
# Redis / Channel Layer / Cache
# -------------------------
ELASTICACHE_ENDPOINT = os.environ.get('ELASTICACHE_ENDPOINT', 'redis')  # 개발용 기본값 'redis'
ELASTICACHE_USER = os.environ.get('ELASTICACHE_USER', '')
ELASTICACHE_PASSWORD = os.environ.get('ELASTICACHE_PASSWORD', '')

REDIS_SCHEME = 'rediss' if ELASTICACHE_USER else 'redis'
REDIS_HOST = ELASTICACHE_ENDPOINT
REDIS_PORT = 6379
REDIS_DB_CHANNELS = 0
REDIS_DB_CACHE = 1

# Channel Layers
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [
                f"{REDIS_SCHEME}://{ELASTICACHE_USER}:{ELASTICACHE_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CHANNELS}"
                if ELASTICACHE_USER else f"{REDIS_SCHEME}://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CHANNELS}"
            ],
        },
    },
}

# Django Caches
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_SCHEME}://{ELASTICACHE_USER}:{ELASTICACHE_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CACHE}"
                    if ELASTICACHE_USER else f"{REDIS_SCHEME}://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CACHE}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SSL_CERT_REQS": None,
        },
    }
}

# -------------------------
# Third-party API Keys
# -------------------------
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.environ.get("ELEVENLABS_API_KEY")

# -------------------------
# AI Chatbot Settings
# -------------------------
AI_CHATBOT_SETTINGS = {
    'MODEL': 'gpt-3.5-turbo',
    'MAX_TOKENS': 1000,
    'TEMPERATURE': 0.7,
    'SYSTEM_PROMPT': '''당신은 도움이 되는 AI 어시스턴트입니다. 모든 사용자의 메시지에 친근하고 유용한 답변을 제공하세요.

[중요] ElevenLabs V3 TTS를 위한 음성 태그 사용 지침:
- 감정이나 톤을 표현하려면 적절한 음성 태그를 사용하세요
- 사용 가능한 태그: [laugh], [sigh], [gasp], [whisper], [excited], [sad], [angry], [confused], [surprised], [pleased], [disappointed]
- 예시: "정말 재미있네요 [laugh]", "음... 그건 좀 어려운 문제네요 [sigh]", "와! 대단해요! [excited]"
- 자연스럽게 대화에 어울리는 태그만 사용하고, 과도하게 사용하지 마세요
- 한 응답에 1-2개 정도의 태그가 적당합니다''',
}
